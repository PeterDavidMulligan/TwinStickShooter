////////////////////////////////////////////////////////////
///	Author: Peter Mulligan
///	Date: 14/03/16
///	Last Edit: 22/03/16
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <iostream>
#include "TestScreen.h"

////////////////////////////////////////////////////////////
// Constructor
////////////////////////////////////////////////////////////
goo::TestScreen::TestScreen(sf::RenderWindow& window, goo::AssetManager& assets, int& currentScreen) :
goo::Screen(window, assets, currentScreen)
{
	initialise();
}

////////////////////////////////////////////////////////////
// Constructor
////////////////////////////////////////////////////////////
goo::TestScreen::~TestScreen()
{
	delete m_player;
	delete m_enemy;
}

////////////////////////////////////////////////////////////
// Public Functions
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
///	\brief Initial class setup
///
////////////////////////////////////////////////////////////
void goo::TestScreen::initialise()
{
	m_player = new Player(m_assets);
	m_enemy = new Enemy(*m_player, m_assets);
	m_enemy->setScale(sf::Vector2f(0.5, 0.5));
	m_velocityText.setFont(m_assets.getFont("KenPixel"));
	m_velocityText.setColor(sf::Color::Black);
}

////////////////////////////////////////////////////////////
///	\brief Function that takes care of user input
///
/// \param e sf::Event to respond to
///
/// \param currentScreen Pointer to integer controlling
/// the current screen
///
////////////////////////////////////////////////////////////
void goo::TestScreen::input(sf::Event e)
{
	checkForScreenClose(e);
	m_player->input();
}

////////////////////////////////////////////////////////////
///	\brief Called once a frame
///
/// \param elapsedTime Time passed since last frame
///
////////////////////////////////////////////////////////////
void goo::TestScreen::update(sf::Time elapsedTime)
{
	std::string m_velocityString;
	sf::Vector2f v = m_enemy->getVelocity();
	m_velocityString = "Vx: " + std::to_string(v.x) + " Vy: " + std::to_string(v.y);
	m_velocityText.setString(m_velocityString);
	m_player->update(elapsedTime);
	m_enemy->update(elapsedTime);
}

////////////////////////////////////////////////////////////
///	\brief Draws assets to the sf::Renderwindow
///
////////////////////////////////////////////////////////////
void goo::TestScreen::draw()
{
	m_window.clear(sf::Color::White);
	m_player->draw(m_window);
	m_enemy->draw(m_window);
	m_window.draw(m_velocityText);
}